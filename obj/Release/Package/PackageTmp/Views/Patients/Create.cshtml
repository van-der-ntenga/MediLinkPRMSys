@model MediLinkCB.Models.PatientResidentialAddressNOKViewModel

@{
    ViewBag.Title = "Add New Patient";
    ViewBag.ShowMenu = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Create", "Patients", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Registration</title>


    <div class="background"></div>
    <div class="form-horizontal">
        @*<centre>
            <h1>Register</h1>
        </centre>

        <p>
            <a href="#" class="img">
                <img src="@Url.Content("~/Content/clinic sign.png")" alt="Clinic Sign" id="header-photo">
            </a>

        </p>*@
        <centre>
            <h2>New Patient</h2>
        </centre>

        <hr>



        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("PatientID", "South African ID/Passport Number")
                @*Html.EditorFor(model => model.SaID, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.TextBoxFor(m => m.PatientID, new { @class = "form-control", placeholder = "Enter ID number", @required = "required", maxlength = 13 })

                @Html.ValidationMessageFor(m => m.PatientID, "", new { @class = "text-danger" })
            </div>

            <div class="form-group half-width">
                @Html.Label("Nationality", "Nationality")
                @Html.DropDownListFor(m => m.Nationality, new SelectList(new[]
                {
                    "South Africa", "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda",
                    "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh",
                    "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina",
                    "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cabo Verde", "Cambodia",
                    "Cameroon", "Canada", "Central African Republic", "Chad", "Chile", "China", "Colombia",
                    "Comoros", "Congo (Congo-Brazzaville)", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czechia (Czech Republic)",
                    "Democratic Republic of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic",
                    "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini (fmr. Swaziland)",
                    "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Greece",
                    "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hungary", "Iceland",
                    "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan",
                    "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho",
                    "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Madagascar", "Malawi", "Malaysia",
                    "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia",
                    "Moldova", "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar (formerly Burma)",
                    "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "North Korea",
                    "North Macedonia", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru",
                    "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis",
                    "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe",
                    "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia",
                    "Solomon Islands", "Somalia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname",
                    "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste",
                    "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda",
                    "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan",
                    "Vanuatu", "Vatican City", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
                }), "-- Select Nationality --", new { @class = "form-control", id = "Nationality", @required = "required" })
            </div>
        </div>



        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("Name", "First Name")
                @Html.TextBoxFor(m => m.PatientName, new { @class = "form-control", placeholder = "Enter first name", @required = "required" })
            </div>

            <div class="form-group half-width">
                @Html.Label("Name", "Last Name")
                @Html.TextBoxFor(m => m.PatientSurname, new { @class = "form-control", placeholder = "Enter last name", @required = "required" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group half-width">
                <label for="DateOfBirth">Date of Birth</label>
                @Html.TextBoxFor(m => m.DateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", id = "DateOfBirth", @required = "required" })
            </div>

            <div class="form-group half-width">
                <label for="Age">Age</label>
                @Html.TextBoxFor(m => m.Age, new { @class = "form-control", type = "number", id = "Age", @readonly = "readonly" })
            </div>
        </div>



        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("PatientHeight", "Height")
                @Html.TextBoxFor(m => m.PatientHeight, new { @class = "form-control", type = "number", min = "0", step = "1", placeholder = "Height in cm", @required = "required" })
            </div>

            <div class="form-group half-width">
                @Html.Label("PatientWeight", "Weight")
                @Html.TextBoxFor(m => m.PatientWeight, new { @class = "form-control", type = "number", min = "0", step = "0.1", placeholder = "Weight in kg", @required = "required" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group half-width">
                <label>Disability</label>
                <div class="radio-group">
                    <!-- Use a different name for the radio button group -->
                    @Html.RadioButton("hasDisability", "yes", false, new { id = "disabilityYes", @onclick = "toggleDisabilityDetails()" })
                    @Html.Label("disabilityYes", "Yes")
                    @Html.RadioButton("hasDisability", "no", true, new { id = "disabilityNo", @onclick = "toggleDisabilityDetails()" })
                    @Html.Label("disabilityNo", "No")
                </div>
            </div>

            <div class="form-group half-width">
                @Html.Label("label", "If Yes, Specify Disability")
                @Html.TextBoxFor(m => m.Disability, new { @class = "form-control", id = "disabilityDetails", @placeholder = "Specify disability", @disabled = "disabled" })
                @Html.Hidden("hiddenDisability", "", new { id = "hiddenDisability" }) <!-- Hidden field to store disability value -->
            </div>
        </div>





        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("Race", "Race")
                @Html.DropDownListFor(m => m.Race, new SelectList(new[] { "Asian", "Black", "Coloured", "Indian", "White" }), "-- Select Race --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Race)
            </div>
            <div class="form-group half-width">
                @Html.Label("Gender", "Gender")
                @Html.DropDownListFor(m => m.Gender, new SelectList(new[] { "Male", "Female", "Other" }), "-- Select Gender --", new { @class = "form-control", @required = "required" })
                @Html.ValidationMessageFor(m => m.Gender)
            </div>
        </div>

        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("HomeLang", "Home Language")
                @Html.DropDownListFor(m => m.HomeLang, new SelectList(new[] { "English", "IsiZulu", "IsiXhosa", "Afrikaans", "Sesotho", "Setswana", "IsiNdebele", "Siswati", "Tshivenda", "Xitsonga", "Other" }), "--Select Language--", new { @class = "form-control", @required = "required" })
            </div>
            <div class="form-group half-width">
                @Html.Label("Marital", "Marital Status")
                @Html.DropDownListFor(m => m.MaritalStatus, new SelectList(new[] { "Single", "Married", "Widowed", "Divorced" }), "--Select Marital Status--", new { @class = "form-control", @required = "required" })
            </div>
        </div>




        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("EmailAddress", "Email Address")
                @Html.TextBoxFor(m => m.EmailAddress, new { @class = "form-control", @placeholder = "Enter Email Address", @type = "email" })
            </div>

            <div class="form-group half-width">
                @Html.Label("CellNumber", "Cellphone Number")

                @Html.TextBoxFor(m => m.CellNumber, new { @class = "form-control", @placeholder = "Enter Cellphone Number", @type = "tel" })
            </div>
        </div>







        <h2>Residential Address</h2>


        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("streetNumber", "Street Address")
                @Html.TextBoxFor(m => m.StreetAddress, new { @id = "streetNumber", @placeholder = "Enter street name", @required = "required" })
            </div>
            <div class="form-group half-width">
                @Html.Label("suburb", "Suburb")
                @Html.TextBoxFor(m => m.Suburb, new { @id = "suburb", @placeholder = "Enter suburb", @required = "required" })
            </div>
        </div>



        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("townCity", "Town/City")
                @Html.TextBoxFor(m => m.City, new { @id = "townCity", @placeholder = "Enter town or city", @required = "required" })
            </div>
            <div class="form-group half-width">
                @Html.Label("postalCode", "Postal Code")
                @Html.TextBoxFor(m => m.PostalCode, new { @id = "postalCode", @placeholder = "Enter postal code", @required = "required" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Prov", "Province")
            @Html.DropDownListFor(m => m.Province, new SelectList(new[] { "Eastern Cape", "Free State", "Gauteng", "KwaZulu-Natal", "Limpopo", "North West", "Mpumalanga", "Northern Cape", "Western Cape" }), "--Select Province--")
        </div>


        <h2>Next of Kin</h2>
        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("kinName", "First Name")
                @Html.TextBoxFor(m => m.NOKFirstName, new { @placeholder = "Enter first name", @required = "required" })
            </div>

            <div class="form-group half-width">
                @Html.Label("kinSurname", "Surname")
                @Html.TextBoxFor(m => m.NOKLastName, new { @placeholder = "Enter surname", @required = "required" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group half-width">
                @Html.Label("kinPhoneNumber", "Phone Number")
                @Html.TextBoxFor(m => m.NOKCellNumber, new { @placeholder = "Enter phone number", @required = "required", @type = "tel" })
            </div>
            <div class="form-group half-width">
                @Html.Label("kinRelationship", "Relationship")
                @Html.DropDownListFor(m => m.Relationship, new SelectList(new[] { "Mother", "Father", "Guardian", "Brother", "Sister", "Grandfather", "Grandmother", "Spouse" }), "--Select Relationship--", new { @class = "form-control" })
            </div>
        </div>


        <hr />
        <centre>
            <button type="submit" class="btn btn-primary">Register</button>
        </centre>

        <hr />
        <div>
            <a href="#" class="img"><img src="@Url.Content("~/Content/health logo.png")" alt="Health Logo" id="footer"></a>
        </div>
    </div>
}


    



@section Scripts {
    <script type="text/javascript">
        function toggleDisabilityDetails() {
            const disabilityYes = document.getElementById('disabilityYes');
            const disabilityNo = document.getElementById('disabilityNo');
            const disabilityDetails = document.getElementById('disabilityDetails');
            const hiddenDisability = document.getElementById('hiddenDisability'); // Hidden field for storing actual value

            if (disabilityYes.checked) {
                // Enable the textbox for disability details if 'Yes' is selected
                disabilityDetails.removeAttribute('disabled');
                disabilityDetails.focus();
                hiddenDisability.value = ''; // Clear hidden field, value will come from textbox
            } else if (disabilityNo.checked) {
                // Disable and reset the textbox if 'No' is selected
                disabilityDetails.setAttribute('disabled', 'disabled');
                disabilityDetails.value = ''; // Clear the textbox
                hiddenDisability.value = 'NONE'; // Set the hidden field to 'NONE'
            }
        }

        // Ensure the correct state of the textbox on page load
        document.addEventListener('DOMContentLoaded', function () {
            toggleDisabilityDetails();
        });

        document.getElementById('disabilityYes').addEventListener('click', toggleDisabilityDetails);
        document.getElementById('disabilityNo').addEventListener('click', toggleDisabilityDetails);


        document.addEventListener("DOMContentLoaded", function () {
            const dateOfBirthInput = document.getElementById('DateOfBirth');
            const ageInput = document.getElementById('Age');

            dateOfBirthInput.addEventListener('change', function () {
                const age = calculateAge(this.value);
                ageInput.value = age; // Update the Age field
            });

            function calculateAge(dateOfBirth) {
                const dob = new Date(dateOfBirth);
                const diffMs = Date.now() - dob.getTime();
                const ageDt = new Date(diffMs);

                return Math.abs(ageDt.getUTCFullYear() - 1970);
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            const nationalityDropdown = document.getElementById('Nationality');
            const patientIDInput = document.getElementById('PatientID');

            nationalityDropdown.addEventListener('change', function () {
                if (nationalityDropdown.value === 'South Africa') {
                    patientIDInput.setAttribute('maxlength', '13');
                    patientIDInput.setAttribute('pattern', '\\d{13}');
                    patientIDInput.setAttribute('title', 'South African ID number must be 13 digits.');
                    patientIDInput.placeholder = "Enter 13-digit SA ID number";
                } else {
                    patientIDInput.setAttribute('maxlength', '8');
                    patientIDInput.setAttribute('pattern', '.{8}');
                    patientIDInput.setAttribute('title', 'Passport number must be 8 characters.');
                    patientIDInput.placeholder = "Enter 8-character Passport number";
                }
            });
        });

    </script>

}
@Html.HiddenFor(m => m.Disability, new { id = "disabilityField" })

