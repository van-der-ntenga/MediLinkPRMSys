@model MediLinkCB.Models.PatientResidentialAddressNOKViewModel

@{
    ViewBag.Title = "Edit";
    ViewBag.ShowMenu = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Patient Details</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.PatientID)

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.PatientName, "Patient Name")
            @Html.EditorFor(model => model.PatientName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PatientName, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.PatientSurname, "Patient Surname")
            @Html.EditorFor(model => model.PatientSurname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PatientSurname, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.DateOfBirth, "Date Of Birth")
            @Html.TextBoxFor(model => model.DateOfBirth, new { @class = "form-control", type = "date", id = "DateOfBirth", Value = Model.DateOfBirth.ToString("yyyy-MM-dd") })
            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.Age, "Age")
            @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", id = "Age", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.PatientHeight, "Height")
            @Html.EditorFor(model => model.PatientHeight, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PatientHeight, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.PatientWeight, "Weight")
            @Html.EditorFor(model => model.PatientWeight, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PatientWeight, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.Gender, "Gender")
            @Html.DropDownListFor(model => model.Gender, new SelectList(new List<string> { "Male", "Female", "Other" }, Model.Gender), "Select Gender", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.Race, "Race")
            @Html.DropDownListFor(model => model.Race, new SelectList(new List<string> { "Asian", "Black", "Coloured", "Indian", "White" }, Model.Race), "Select Race", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Race, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.HomeLang, "Home Language")
            @Html.DropDownListFor(model => model.HomeLang, new SelectList(new List<string> { "English", "IsiZulu", "IsiXhosa", "Afrikaans", "Sesotho", "Setswana", "IsiNdebele", "Siswati", "Tshivenda", "Xitsonga", "Other" }, Model.HomeLang), "Select Home Language", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.HomeLang, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.MaritalStatus, "Marital Status")
            @Html.DropDownListFor(model => model.MaritalStatus, new SelectList(new List<string> { "Single", "Married", "Widowed", "Divorced" }, Model.MaritalStatus), "Select Marital Status", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.Disability, "Disability")
            @Html.EditorFor(model => model.Disability, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Disability, "", new { @class = "text-danger" })
        </div>


    </div>

    <h4>Residential Address</h4>
    <hr />

    <div class="form-row">

        <div class="form-group half-width">
            @Html.LabelFor(model => model.StreetAddress, "Street Address")
            @Html.EditorFor(model => model.StreetAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.StreetAddress, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.Suburb, "Suburb")
            @Html.EditorFor(model => model.Suburb, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Suburb, "", new { @class = "text-danger" })
        </div>


    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.City, "City")
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
        </div>
        <div class="form-group half-width">
            @Html.LabelFor(model => model.PostalCode, "Postal Code")
            @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
        </div>


    </div>
    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.Province, "Province")
            @Html.DropDownListFor(m => m.Province, new SelectList(new List<string> { "Eastern Cape", "Free State", "Gauteng", "KwaZulu-Natal", "Limpopo", "North West", "Mpumalanga", "Northern Cape", "Western Cape" }, Model.Province), "--Select Province--", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.EmailAddress, "Email Address")
            @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.CellNumber, "Cell Number")
            @Html.EditorFor(model => model.CellNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CellNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <h4>Next Of Kin</h4>
    <hr />

    <div class="form-row">
        <div class="form-group half-width">
            @Html.LabelFor(model => model.NOKFirstName, "Next of Kin First Name")
            @Html.EditorFor(model => model.NOKFirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NOKFirstName, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.NOKLastName, "Next of Kin Last Name")
            @Html.EditorFor(model => model.NOKLastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NOKLastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group half-width">
            @Html.Label("kinRelationship", "Relationship")
            @Html.DropDownListFor(m => m.Relationship, new SelectList(new[] { "Mother", "Father", "Guardian", "Brother", "Sister", "Grandfather", "Grandmother", "Spouse" }), "--Select Relationship--", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Relationship, "", new { @class = "text-danger" })
        </div>

        <div class="form-group half-width">
            @Html.LabelFor(model => model.NOKCellNumber, "Next of Kin Cell Number")
            @Html.EditorFor(model => model.NOKCellNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NOKCellNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<!-- JavaScript to calculate age based on the selected date of birth -->
<script type="text/javascript">
    document.getElementById("DateOfBirth").addEventListener("change", function () {
        var dob = new Date(this.value);
        if (!isNaN(dob.getTime())) { // Check if the date is valid
            var today = new Date();
            var age = today.getFullYear() - dob.getFullYear();
            var monthDifference = today.getMonth() - dob.getMonth();
            if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < dob.getDate())) {
                age--;
            }
            document.getElementById("Age").value = age;
        }
    });

    // Trigger the age calculation when the page loads (for edit scenarios)
    document.addEventListener("DOMContentLoaded", function () {
        var dobElement = document.getElementById("DateOfBirth");
        if (dobElement.value) {
            dobElement.dispatchEvent(new Event("change"));
        }
    });
</script>
