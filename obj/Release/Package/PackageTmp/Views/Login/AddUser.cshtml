@model MediLinkCB.Models.UserProfilesViewModel

@{
    ViewBag.Title = "Create";
    ViewBag.ShowSidebar = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm("AddUser", "Login", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.Partial("_Sidebar")
        <button class="openbtn" onclick="openNav()">&#9776; Menu</button>

        <h4>User Profile</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" }) <!-- Validation summary -->

        <div class="form-row">
            <div class="form-group half-width">
                @Html.LabelFor(m => m.UserName, "Username")
                @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group half-width">
                @Html.LabelFor(m => m.Password, "Password")
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", @id = "password-field" })
                <span id="password-message" class="text-danger" style="display: none;"></span> <!-- Password error message -->
            </div>
        </div>

        <div class="form-row">
            <div class="form-group half-width">
                @Html.LabelFor(m => m.Email)
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
            </div>

            <div class="form-group half-width">
                @Html.LabelFor(m => m.UserType, "User Type")
                @Html.DropDownListFor(m => m.UserType, new SelectList(new[] { "Doctor", "Nurse", "Clerk" }), "Select User Type", new { @class = "form-control", id = "userType" })
                @Html.ValidationMessageFor(m => m.UserType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="specialisation-group" style="display: none;">
            @Html.LabelFor(m => m.Specialisation, "Specialisation")
            @Html.DropDownListFor(m => m.Specialisation, new SelectList(new[] { "Optometrist", "General Practitioner", "Gynaecologist", "Audiologist" }), "Select Specialisation", new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.IsActive, "User Active")
            <div>
                <label>@Html.RadioButtonFor(m => m.IsActive, true) Active</label>
                <label>@Html.RadioButtonFor(m => m.IsActive, false) Inactive</label>
            </div>
            @Html.ValidationMessageFor(m => m.IsActive, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>

        @if (!String.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="alert alert-danger">@ViewBag.Message</div>
        }
    </div>
}

<!-- JavaScript block -->
<script>
    // Show/hide Specialisation dropdown based on UserType selection
    document.getElementById('userType').addEventListener('change', function () {
        var specialisationGroup = document.getElementById('specialisation-group');
        if (this.value === 'Doctor') {
            specialisationGroup.style.display = 'block';
        } else {
            specialisationGroup.style.display = 'none';
        }
    });

    // Validate password format when the user leaves the field (blur event)
    document.getElementById('password-field').addEventListener('blur', function () {
        var password = this.value;
        var passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@@$!%*#?&])[A-Za-z\d@@$!%*#?&]{8,}$/;
        var passwordMessage = document.getElementById('password-message');

        if (!passwordRegex.test(password)) {
            passwordMessage.style.display = 'block';
            passwordMessage.textContent = "Password must be at least 8 characters long, contain at least one number, and one special character.";
        } else {
            passwordMessage.style.display = 'none';
        }
    });
</script>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval") <!-- This bundle contains the validation logic -->
}
