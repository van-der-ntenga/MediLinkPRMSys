@model MediLinkCB.Models.Appointment

@{
    ViewBag.Title = "Book an Appointment";
    ViewBag.ShowMenu = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="form-horizontal">
    <h1>@ViewBag.Title</h1>

    @using (Html.BeginForm("Create", "Appointments", FormMethod.Post, new { id = "appointmentForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-row">
            <div class="form-group half-width">
                @Html.LabelFor(model => model.PatientID, "South Africa ID/Passport Number:")
                @Html.TextBoxFor(model => model.PatientID, new { @class = "form-control", @required = "required", id = "PatientID" })
                @Html.ValidationMessageFor(model => model.PatientID, "", new { @class = "text-danger" })
                <span id="saIdStatus" class="text-danger"></span>
            </div>
            <div class="form-group half-width">
                @Html.LabelFor(model => model.EmailAddress, "Email Address:")
                @Html.TextBoxFor(model => model.EmailAddress, new { @class = "form-control", @type = "email", @required = "required" })
                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group half-width">
                @Html.LabelFor(model => model.AppointmentReason, "Select an appointment reason:")
                @Html.DropDownListFor(model => model.AppointmentReason, new SelectList(new[] {
                    "Optometrist", "Gynaecologist", "Audiologist", "Routine Check-Up", "Family Planning", "General Practitioner"
                }), "-- Select Reason --", new { @class = "form-control", @required = "required", id = "AppointmentReason" })
                @Html.ValidationMessageFor(model => model.AppointmentReason, "", new { @class = "text-danger" })
            </div>
            <div class="form-group half-width">
                @Html.LabelFor(model => model.AppointmentDateTime, "Select Date and Time:")
                @Html.TextBoxFor(model => model.AppointmentDateTime, new { @class = "form-control", @type = "datetime-local", @required = "required", id = "AppointmentDate" })
                @Html.ValidationMessageFor(model => model.AppointmentDateTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <input type="submit" value="Book Appointment" class="btn btn-primary" id="submitBtn" disabled />
        </div>


        <div class="form-group">
            <label for="availableSlots">Booked Slots for the Next 14 Days:</label>
            <ul id="availableSlots"></ul>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        const specialistServices = ["Optometrist", "Gynaecologist", "Audiologist"];
        const minSpecialistTime = "10:00";
        const maxSpecialistTime = "15:00";
        const minGeneralTime = "08:00";
        const maxGeneralTime = "16:00";
        const timeIncrement = 20;

        function checkSaID() {
            const saId = $("#PatientID").val();  // Corrected the ID reference
            $.ajax({
                url: "/Appointments/CheckSaID",
                data: { saId: saId },
                success: function (response) {
                    if (response.exists) {
                        $("#saIdStatus").removeClass("text-danger").addClass("text-success").text("Patient found.");
                        $("#submitBtn").prop("disabled", false);  // Enable the submit button
                    } else {
                        $("#saIdStatus").removeClass("text-success").addClass("text-danger").text("Patient not found.");
                        $("#submitBtn").prop("disabled", true);  // Keep the submit button disabled
                    }
                },
                error: function () {
                    $("#saIdStatus").addClass("text-danger").text("Error validating Patient ID.");
                    $("#submitBtn").prop("disabled", true);  // Keep the submit button disabled on error
                }
            });
        }

        function loadBookedSlots() {
            
            let appointmentReason = $("#AppointmentReason").val();

            if (!appointmentReason) {
                $("#availableSlots").empty();  
                return;
            }

            $.ajax({
                url: "/Appointments/GetBookedSlots",
                data: { appointmentReason: appointmentReason },
                success: function (response) {
                    if (response.success) {
                        updateBookedSlotsUI(response.bookedSlots);
                    } else {
                        alert(response.message || "Unable to load booked slots.");
                    }
                },
                error: function () {
                    alert("An error occurred while loading booked slots.");
                }
            });
        }

        function updateBookedSlotsUI(bookedSlots) {
            $("#availableSlots").empty();  

            if (bookedSlots.length === 0) {
                $("#availableSlots").append("<li>No slots booked for the selected reason within the next 14 days.</li>");
                return;
            }

            bookedSlots.forEach(slot => {
                
                let appointmentDateTime = new Date(slot.AppointmentDateTime);

                if (!isNaN(appointmentDateTime.getTime())) {
                    let formattedDateTime = appointmentDateTime.toLocaleString();
                    let li = $("<li>").text(formattedDateTime); 
                    $("#availableSlots").append(li); 
                } else {
                    $("#availableSlots").append("<li>Invalid date format found for a booked slot.</li>");
                }
            });
        }

        function validateTimeSlot() {
            const appointmentReason = $("#AppointmentReason").val();
            const selectedDateTime = new Date($("#AppointmentDateTime").val());

            const selectedTime = selectedDateTime.getHours() * 60 + selectedDateTime.getMinutes();
            let minTime, maxTime;

            if (specialistServices.includes(appointmentReason)) {
                minTime = parseInt(minSpecialistTime.split(":")[0]) * 60;
                maxTime = parseInt(maxSpecialistTime.split(":")[0]) * 60;
            } else {
                minTime = parseInt(minGeneralTime.split(":")[0]) * 60;
                maxTime = parseInt(maxGeneralTime.split(":")[0]) * 60;
            }

            if (selectedTime < minTime || selectedTime > maxTime) {
                alert(`Please select a time between ${minTime / 60}:00 and ${maxTime / 60}:00.`);
                return false;
            }
            return true;
        }

        $(document).ready(function () {
            $("#PatientID").on("blur", checkSaID); // Validate SaID
            $("#submitBtn").prop("disabled", true);
            $("#AppointmentReason").on("change", function () {
                loadBookedSlots();  // Load the slots dynamically
            });

            $('#AppointmentDateTime').on('change', function () {
                let selectedDateTime = new Date($(this).val());
                let selectedTime = selectedDateTime.getHours() * 60 + selectedDateTime.getMinutes();

                let minTime = 8 * 60; 
                let maxTime = 16 * 60;  

               
                if (selectedTime < minTime || selectedTime > maxTime || selectedTime % 20 !== 0) {
                    alert("Please select a valid appointment time between 08:00 and 16:00, with 20-minute increments.");
                    $(this).val(''); 
                }
            });

            $("#appointmentForm").on("submit", function (e) {
                e.preventDefault();
                if (!validateTimeSlot()) {
                    return;
                }
                this.submit();
            });
        });
    </script>
}
